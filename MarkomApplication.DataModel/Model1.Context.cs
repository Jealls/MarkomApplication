//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkomApplication.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarkomApplicationDBEntities : DbContext
    {
        public MarkomApplicationDBEntities()
            : base("name=MarkomApplicationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<m_company> m_company { get; set; }
        public virtual DbSet<m_employee> m_employee { get; set; }
        public virtual DbSet<m_menu> m_menu { get; set; }
        public virtual DbSet<m_menu_access> m_menu_access { get; set; }
        public virtual DbSet<m_product> m_product { get; set; }
        public virtual DbSet<m_role> m_role { get; set; }
        public virtual DbSet<m_souvenir> m_souvenir { get; set; }
        public virtual DbSet<m_unit> m_unit { get; set; }
        public virtual DbSet<m_user> m_user { get; set; }
        public virtual DbSet<t_design> t_design { get; set; }
        public virtual DbSet<t_design_item> t_design_item { get; set; }
        public virtual DbSet<t_design_item_file> t_design_item_file { get; set; }
        public virtual DbSet<t_event> t_event { get; set; }
        public virtual DbSet<t_promotion> t_promotion { get; set; }
        public virtual DbSet<t_promotion_item> t_promotion_item { get; set; }
        public virtual DbSet<t_promotion_item_file> t_promotion_item_file { get; set; }
        public virtual DbSet<t_souvenir_item> t_souvenir_item { get; set; }
        public virtual DbSet<t_souvernir> t_souvernir { get; set; }
    
        public virtual ObjectResult<spCompanyList_Result1> spCompanyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCompanyList_Result1>("spCompanyList");
        }
    
        public virtual ObjectResult<spCompanyDetailByID_Result> spCompanyDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCompanyDetailByID_Result>("spCompanyDetailByID", idParameter);
        }
    
        public virtual int spCompanyDelete(Nullable<int> id, ObjectParameter code)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCompanyDelete", idParameter, code);
        }
    
        public virtual int spCompanyUpdate(Nullable<int> id, string name, string email, string address, string phone, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCompanyUpdate", idParameter, nameParameter, emailParameter, addressParameter, phoneParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual int spDeleteRow(Nullable<int> id, string tableName, ObjectParameter code)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRow", idParameter, tableNameParameter, code);
        }
    
        public virtual int spSearchSingleString(string prefix, string columnName, string tableName)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSearchSingleString", prefixParameter, columnNameParameter, tableNameParameter);
        }
    
        public virtual ObjectResult<m_company> spCompanySingleString(string prefix, string columnName)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<m_company>("spCompanySingleString", prefixParameter, columnNameParameter);
        }
    
        public virtual ObjectResult<m_company> spCompanySingleString(string prefix, string columnName, MergeOption mergeOption)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<m_company>("spCompanySingleString", mergeOption, prefixParameter, columnNameParameter);
        }
    
        public virtual ObjectResult<spCompany_Result> spSearchCompany(string code, string name, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCompany_Result>("spSearchCompany", codeParameter, nameParameter, createDateParameter, createByParameter);
        }
    
        public virtual ObjectResult<spEmployeeCompanyName_Result> spEmployeeCompanyName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeCompanyName_Result>("spEmployeeCompanyName", prefixParameter);
        }
    
        public virtual int spEmployeeDelete(Nullable<int> id, ObjectParameter idNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeDelete", idParameter, idNumber);
        }
    
        public virtual ObjectResult<spEmployeeDetailByID_Result> spEmployeeDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeDetailByID_Result>("spEmployeeDetailByID", idParameter);
        }
    
        public virtual int spEmployeeInsert(string code, string fistName, string lastName, Nullable<int> companyId, string email, Nullable<bool> isDelete, string createBy, Nullable<System.DateTime> createDate)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fistNameParameter = fistName != null ?
                new ObjectParameter("FistName", fistName) :
                new ObjectParameter("FistName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeInsert", codeParameter, fistNameParameter, lastNameParameter, companyIdParameter, emailParameter, isDeleteParameter, createByParameter, createDateParameter);
        }
    
        public virtual ObjectResult<spEmployeeSearch_Result> spEmployeeSearch(string code, string name, Nullable<int> companyId, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeSearch_Result>("spEmployeeSearch", codeParameter, nameParameter, companyIdParameter, createDateParameter, createByParameter);
        }
    
        public virtual int spEmployeeUpdate(Nullable<int> id, string code, string fistName, string lastName, Nullable<int> companyId, string email, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fistNameParameter = fistName != null ?
                new ObjectParameter("FistName", fistName) :
                new ObjectParameter("FistName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeUpdate", idParameter, codeParameter, fistNameParameter, lastNameParameter, companyIdParameter, emailParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<spEmployeeName_Result> spEmployeeName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeName_Result>("spEmployeeName", prefixParameter);
        }
    
        public virtual ObjectResult<spEmployeeNumber_Result> spEmployeeNumber(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmployeeNumber_Result>("spEmployeeNumber", prefixParameter);
        }
    
        public virtual ObjectResult<spRoleCode_Result> spRoleCode(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleCode_Result>("spRoleCode", prefixParameter);
        }
    
        public virtual int spRoleDelete(Nullable<int> id, ObjectParameter idNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoleDelete", idParameter, idNumber);
        }
    
        public virtual ObjectResult<spRoleDetailByID_Result> spRoleDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleDetailByID_Result>("spRoleDetailByID", idParameter);
        }
    
        public virtual int spRoleInsert(string code, string roleName, string description, string createBy, Nullable<System.DateTime> createDate)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoleInsert", codeParameter, roleNameParameter, descriptionParameter, createByParameter, createDateParameter);
        }
    
        public virtual ObjectResult<spRoleName_Result> spRoleName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleName_Result>("spRoleName", prefixParameter);
        }
    
        public virtual ObjectResult<spRoleSearch_Result> spRoleSearch(string code, string name, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleSearch_Result>("spRoleSearch", codeParameter, nameParameter, createDateParameter, createByParameter);
        }
    
        public virtual int spRoleUpdate(Nullable<int> id, string roleName, string description, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoleUpdate", idParameter, roleNameParameter, descriptionParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<spEmpNameById_Result> spEmpNameById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmpNameById_Result>("spEmpNameById", idParameter);
        }
    
        public virtual ObjectResult<spEventSearch_Result> spEventSearch(string code, string requestByName, Nullable<System.DateTime> requestDate, Nullable<int> status, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var requestByNameParameter = requestByName != null ?
                new ObjectParameter("RequestByName", requestByName) :
                new ObjectParameter("RequestByName", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("RequestDate", requestDate) :
                new ObjectParameter("RequestDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEventSearch_Result>("spEventSearch", codeParameter, requestByNameParameter, requestDateParameter, statusParameter, createDateParameter, createByParameter);
        }
    
        public virtual ObjectResult<spEventDetailByID_Result> spEventDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEventDetailByID_Result>("spEventDetailByID", idParameter);
        }
    
        public virtual int spEventUpdate(Nullable<int> id, ObjectParameter code, string eventName, string place, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> budget, string note, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(long));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEventUpdate", idParameter, code, eventNameParameter, placeParameter, startDateParameter, endDateParameter, budgetParameter, noteParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEmployeeCountCode(string empNum)
        {
            var empNumParameter = empNum != null ?
                new ObjectParameter("EmpNum", empNum) :
                new ObjectParameter("EmpNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEmployeeCountCode", empNumParameter);
        }
    
        public virtual ObjectResult<spGetEmpNameStaff_Result> spGetEmpNameStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmpNameStaff_Result>("spGetEmpNameStaff");
        }
    
        public virtual int spEventApprove(Nullable<int> id, ObjectParameter code, Nullable<int> status, Nullable<int> assignTo, Nullable<int> approveBy, Nullable<System.DateTime> approveDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var assignToParameter = assignTo.HasValue ?
                new ObjectParameter("AssignTo", assignTo) :
                new ObjectParameter("AssignTo", typeof(int));
    
            var approveByParameter = approveBy.HasValue ?
                new ObjectParameter("ApproveBy", approveBy) :
                new ObjectParameter("ApproveBy", typeof(int));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEventApprove", idParameter, code, statusParameter, assignToParameter, approveByParameter, approveDateParameter);
        }
    
        public virtual int spEventReject(Nullable<int> id, ObjectParameter code, string rejectReason, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEventReject", idParameter, code, rejectReasonParameter, statusParameter);
        }
    
        public virtual int spEventClose(Nullable<int> id, ObjectParameter code, Nullable<int> status, Nullable<System.DateTime> closeDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEventClose", idParameter, code, statusParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<spMenuCode_Result> spMenuCode(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuCode_Result>("spMenuCode", prefixParameter);
        }
    
        public virtual ObjectResult<spMenuName_Result> spMenuName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuName_Result>("spMenuName", prefixParameter);
        }
    
        public virtual ObjectResult<spMenuSearch_Result> spMenuSearch(string code, string name, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuSearch_Result>("spMenuSearch", codeParameter, nameParameter, createDateParameter, createByParameter);
        }
    
        public virtual ObjectResult<spMenuParent_Result> spMenuParent(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuParent_Result>("spMenuParent", prefixParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCompanyCountName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCompanyCountName", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spMenuCountName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spMenuCountName", nameParameter);
        }
    
        public virtual ObjectResult<spMenuDetailByID_Result> spMenuDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenuDetailByID_Result>("spMenuDetailByID", idParameter);
        }
    
        public virtual int spMenuUpdate(Nullable<int> id, string menuName, string controller, Nullable<int> parentId, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMenuUpdate", idParameter, menuNameParameter, controllerParameter, parentIdParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRoleCountName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRoleCountName", nameParameter);
        }
    
        public virtual int spMenuDelete(Nullable<int> id, ObjectParameter idNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMenuDelete", idParameter, idNumber);
        }
    
        public virtual ObjectResult<Nullable<int>> spUnitCountName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUnitCountName", nameParameter);
        }
    
        public virtual int spUnitDelete(Nullable<int> id, ObjectParameter idNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUnitDelete", idParameter, idNumber);
        }
    
        public virtual ObjectResult<spUnitDetailByID_Result> spUnitDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitDetailByID_Result>("spUnitDetailByID", idParameter);
        }
    
        public virtual ObjectResult<spUnitSearch_Result> spUnitSearch(string code, string name, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitSearch_Result>("spUnitSearch", codeParameter, nameParameter, createDateParameter, createByParameter);
        }
    
        public virtual int spUnitUpdate(Nullable<int> id, string unitName, string description, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUnitUpdate", idParameter, unitNameParameter, descriptionParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSouCountName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSouCountName", nameParameter);
        }
    
        public virtual int spSouDelete(Nullable<int> id, ObjectParameter idNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSouDelete", idParameter, idNumber);
        }
    
        public virtual ObjectResult<spSouDetailByID_Result> spSouDetailByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSouDetailByID_Result>("spSouDetailByID", idParameter);
        }
    
        public virtual ObjectResult<spSouName_Result> spSouName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSouName_Result>("spSouName", prefixParameter);
        }
    
        public virtual ObjectResult<spSouSearch_Result> spSouSearch(string code, string name, Nullable<int> unitId, Nullable<System.DateTime> createDate, string createBy)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSouSearch_Result>("spSouSearch", codeParameter, nameParameter, unitIdParameter, createDateParameter, createByParameter);
        }
    
        public virtual int spSouUpdate(Nullable<int> id, string souName, Nullable<int> unitId, string description, string updateBy, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var souNameParameter = souName != null ?
                new ObjectParameter("SouName", souName) :
                new ObjectParameter("SouName", typeof(string));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSouUpdate", idParameter, souNameParameter, unitIdParameter, descriptionParameter, updateByParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<spSouCode_Result> spSouCode(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSouCode_Result>("spSouCode", prefixParameter);
        }
    
        public virtual ObjectResult<spUnitName_Result> spUnitName(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitName_Result>("spUnitName", prefixParameter);
        }
    
        public virtual ObjectResult<spUnitCode_Result> spUnitCode(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUnitCode_Result>("spUnitCode", prefixParameter);
        }
    }
}
